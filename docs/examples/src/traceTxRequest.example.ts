import {
  getUnlimitedBalanceAndApprovalStateOverrides,
  LogVerbosity,
  TransactionTracer,
} from '@evm-transaction-trace/tracer'
import {
  type Address,
  createWalletClient,
  erc20Abi,
  type Hex,
  http,
  type PublicClient,
  publicActions,
} from 'viem'
import { privateKeyToAccount } from 'viem/accounts'
import { LBPairAbi } from './abi/LBPair'
import { LBRouterAbi } from './abi/LBRouterabi'
import { OBExecutorAbi } from './abi/obExecutorAbi'
import { RouterAbi } from './abi/routerabi'
import { getPublicClient, hyperEvm } from './client'
import { ETHERSCAN_API_KEY, RPC_URL } from './config'
import { ERC20A, EXECUTOR, LBRouter, ROUTER } from './constants'

export const getWalletClient = (rpcUrl: string, privateKey: Hex) => {
  const account = privateKeyToAccount(privateKey)

  return createWalletClient({
    account,
    transport: http(rpcUrl),
    chain: hyperEvm,
  }).extend(publicActions)
}

const client = getPublicClient(RPC_URL) as PublicClient
const _w = getWalletClient(
  RPC_URL,
  '0x633bfff860cf751c465f718c3563b15cf3f52c8788461ffbd863c728eeafef3b',
)
export const TOKEN = '0x5555555555555555555555555555555555555555'
const _SENDER: Address = '0xc91E7af2E874A2e04183908AdD8b5c3bDb515CFC'

const tracer = new TransactionTracer(client, {
  cachePath: `./tx-cache-dir`,
  cacheOptions: {
    etherscanApiKey: ETHERSCAN_API_KEY,
    byAddress: {
      [ROUTER]: RouterAbi,
      [LBRouter]: LBRouterAbi,
      [EXECUTOR]: OBExecutorAbi,
      [ERC20A]: erc20Abi,
    },
    extraAbis: [RouterAbi, LBPairAbi],
  },
  verbosity: LogVerbosity.Highest,
})

await tracer.init()

const [_error, trace] = await tracer.traceCall({
  account: _SENDER,
  //   blockTag: 'latest',
  to: ROUTER,
  data: '0xd46cadbc00000000000000000000000055555555555555555555555555555555555555550000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000b8ce59fc3717ada4c02eadf9682a9e934f625ebb0000000000000000000000000000000000000000000000000000000019e7e3c10000000000000000000000000000000000000000000000000000000019e739fa000000000000000000000000c91e7af2e874a2e04183908add8b5c3bdb515cfc000000000000000000000000000000000000000000000000000000000000012000000000000000000000000007b93b6766a40df8c96440dc55708ca997229872000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000b9B8CE59FC3717ada4C02eaDF9682A9e934F625ebb0000000000000000000000000000000000000000000000000000000000000019e7e3c10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001555555555555555555555555555555555555555501ffff01337b56d87A6185cD46AF3Ac2cDF03CBC37070C300107B93B6766A40Df8C96440DC55708ca99722987200000000000000',
  tracer: 'callTracer',
  chain: client.chain,
  tracerConfig: { withLog: true },
  stateOverride: getUnlimitedBalanceAndApprovalStateOverrides(_SENDER, TOKEN, ROUTER),
})

console.log(trace)

// const x = await w.sendTransaction({
//   to: ROUTER,
//   data: '0xd46cadbc000000000000000000000000ffaa4a3d97fe9107cef8a3f48c069f577ff76cc100000000000000000000000000000000000000000000000000043a4c774860000000000000000000000000005555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000439ddaed0e49e000000000000000000000000000000000000000000000000000439c1fcb305c5000000000000000000000000c91e7af2e874a2e04183908add8b5c3bdb515cfc000000000000000000000000000000000000000000000000000000000000012000000000000000000000000007b93b6766a40df8c96440dc55708ca997229872000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000cd5555555555555555555555555555555555555555000000000000000000000000000000000000000000000000000000000439ddaed0e49e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fFaa4a3D97fE9107Cef8a3F48c069F577Ff76cC101ffff1d5365b6ef09253c7abc0a9286ec578a9f4b413b7d0107B93B6766A40Df8C96440DC55708ca997229872555555555555555555555555555555555555555500000000000000000000000000000000000000',
// })

// console.log(x)
