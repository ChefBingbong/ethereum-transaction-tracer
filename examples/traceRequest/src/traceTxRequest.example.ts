import {
  getUnlimitedBalanceAndApprovalStateOverrides,
  LogVerbosity,
  TransactionTracer,
} from '@evm-transaction-trace/tracer'
import { erc20Abi, type PublicClient } from 'viem'
import { getPublicClient } from './client'
import { ETHERSCAN_API_KEY, RPC_URL } from './config'
import { USDT0 } from './constants'

// must use a berachain al url for this example
const client = getPublicClient(RPC_URL) as PublicClient

const TOKEN = '0xFCBD14DC51f0A4d49d5E53C2E0950e0bC26d0Dce'
const SENDER = '0xc91E7af2E874A2e04183908AdD8b5c3bDb515CFC'
const TO = '0xFd88aD4849BA0F729D6fF4bC27Ff948Ab1Ac3dE7'

const tracer = new TransactionTracer(client, {
  cachePath: `./tx-cache-dir`,
  cacheOptions: {
    etherscanApiKey: ETHERSCAN_API_KEY, // must have a etherscan api key
    byAddress: {
      [USDT0]: {
        name: 'USDT',
        abi: erc20Abi,
      },
    },
    contractNames: {
      [USDT0]: 'USDT',
    },
    extraAbis: [erc20Abi],
  },
  verbosity: LogVerbosity.Highest,
})

if (import.meta.main) {
  const [error, trace] = await tracer.traceCall({
    account: SENDER,
    blockNumber: 9451543n,
    to: TO,
    data: '0xd46cadbc000000000000000000000000fcbd14dc51f0a4d49d5e53c2e0950e0bc26d0dce0000000000000000000000000000000000000000000000001bc16d674ec8000000000000000000000000000069696969696969696969696969696969696969690000000000000000000000000000000000000000000000000ce398a6ded21fb70000000000000000000000000000000000000000000000000cc299af71129528000000000000000000000000e1c73b54dde8df5eb6472160f3648305be0a282600000000000000000000000000000000000000000000000000000000000001200000000000000000000000008db25eb64830a30254a1c016e873df97bcee41380000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000017f69696969696969696969696969696969696969690100000000000000000000000000000000000000000000000000000ce398a6ded21fb70000000000000000000000000000000000000000000000000c86bb32a60333000000000000000000000000000000000000000000000000000c86cc1f64e2590001FCBD14DC51f0A4d49d5E53C2E0950e0bC26d0Dce01ffff019D4085e8B950F62d594bbBCac2AA0d5a0dC0e0E0008DB25Eb64830a30254a1c016E873Df97BcEE413801118D2cEeE9785eaf70C15Cd74CD84c9f8c3EeC9a01ffff012608B7c8Eb17e22CB95b7cD6f872993cf33a4CA1018DB25Eb64830a30254a1c016E873Df97BcEE413801D2C41BF4033A83C0FC3A7F58a392Bf37d6dCDb5801ffff17e5CAB105E2dC57bf0c27670D1aED543Dd526B68b8DB25Eb64830a30254a1c016E873Df97BcEE41380001ac03CABA51e17c86c921E1f6CBFBdC91F8BB2E6b01ffff0112bf773F18cEC56F14e7cb91d82984eF5A3148EE008DB25Eb64830a30254a1c016E873Df97BcEE413800',
    tracer: 'callTracer',
    chain: client.chain,
    tracerConfig: { withLog: true },
    stateOverride: getUnlimitedBalanceAndApprovalStateOverrides(SENDER, TOKEN, TO),
  })

  if (error) {
    console.log(error)
    process.exit(1)
  }
  console.log(trace)
  process.exit(0)
}
