import fs from 'node:fs'
import { afterAll, describe, expect, it } from 'vitest'
import { getUnlimitedBalanceAndApprovalStateOverrides } from '../src'
import {
  defaultTestClient,
  publicTestClient,
  publicTestClient2,
  SAMPLE_TX_HASH,
  SENDER,
  TEST_CACHE_DIR,
  TO,
  TOKEN,
} from './utils/setup'

describe.skip('TransactionTracer â€“ integration (mainnet fork)', () => {
  afterAll(() => {
    try {
      return fs.rmSync(TEST_CACHE_DIR, { recursive: true, force: true })
    } catch {}
  })

  it('formats a real mainnet transaction trace', async () => {
    const [error, res] = await defaultTestClient.traceTransactionHash({
      txHash: SAMPLE_TX_HASH,
      cache: {
        cachePath: TEST_CACHE_DIR,
        etherscanApiKey: '8E6CI28EZUYCY1GG8CMZTPCCCNCVYCS8S2',
      },
      run: {
        env: { kind: 'rpc' },
        showProgressBar: false,
        streamLogs: false,
      },
    })

    expect(error).toBeUndefined()

    expect(res).toBeDefined()
    expect(res?.traceRaw).toBeTruthy()
    expect(res!.traceFormatted).toBeTruthy()
  }, 120_000)

  it('should throw invalid rpc provider error nesecary for trace tx', async () => {
    const [error, res] = await publicTestClient.traceTransactionHash({
      txHash: SAMPLE_TX_HASH,
      cache: {
        cachePath: TEST_CACHE_DIR,
        etherscanApiKey: '8E6CI28EZUYCY1GG8CMZTPCCCNCVYCS8S2',
      },
      run: {
        env: { kind: 'rpc' },
        showProgressBar: false,
        streamLogs: false,
      },
    })

    expect(res).toBeUndefined()
    expect(error?.name).toBeDefined()
    expect(error?.name).toBe('UnsupportedTraceMethodError')
  })

  it('should simulate correctly for trace request', async () => {
    const [error, res] = await publicTestClient2.traceCall({
      account: SENDER,
      blockNumber: 23212888n,
      to: TO,
      data: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068ab678a00000000000000000000000000000000000000000000000000000000000000050a00100604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000068d2ed4e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000066a9893cc07d91d95644aedd05d03f95e1dba8af0000000000000000000000000000000000000000000000000000000068ab675600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041c34d9b0f6434f4d6ef00b2b3159d2a1f5988a5537312d06e07c163024a74b330263dfa8956cd830eb6697c45085bcc383702b39fbf1a3ea69ddf8830a6470bcc1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000015af43ac000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002ba0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000064dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000030b070e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000dac17f958d2ee523a2206206994597c13d831ecf4000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000da8a8833e938192781ade161d4b46c4973a40402000000000000000000000000000000000000000000000031f25585d4ebc644aa0c',
      chain: publicTestClient2.chain,
      kzg: undefined,
      stateOverride: getUnlimitedBalanceAndApprovalStateOverrides(
        SENDER,
        TOKEN,
        TO,
      ),
      cache: {
        cachePath: TEST_CACHE_DIR,
        etherscanApiKey: '8E6CI28EZUYCY1GG8CMZTPCCCNCVYCS8S2',
      },
      run: {
        env: { kind: 'fork', blockNumber: 23212888 },
        showProgressBar: false,
        streamLogs: false,
      },
    })

    console.log(res?.traceRaw.calls)
    expect(error).toBeUndefined()
    expect(res).toBeDefined()
    expect(res?.traceFormatted).toMatchSnapshot('traceRaw:summary')
  }, 120000)

  it('should throw invalid rpc provider error nesecary for trace request', async () => {
    const [error, res] = await publicTestClient.traceCall({
      account: SENDER,
      blockNumber: 23212888n,
      to: TO,
      data: '0x3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000068ab678a00000000000000000000000000000000000000000000000000000000000000050a00100604000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000340000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000ffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000068d2ed4e000000000000000000000000000000000000000000000000000000000000000200000000000000000000000066a9893cc07d91d95644aedd05d03f95e1dba8af0000000000000000000000000000000000000000000000000000000068ab675600000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041c34d9b0f6434f4d6ef00b2b3159d2a1f5988a5537312d06e07c163024a74b330263dfa8956cd830eb6697c45085bcc383702b39fbf1a3ea69ddf8830a6470bcc1c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000015af43ac000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002ba0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000064dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a00000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000030b070e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003800000000000000000000000000000000000000000000000000000000000000060000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec78000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000dac17f958d2ee523a2206206994597c13d831ecf4000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000000000000000000000000000000000271100000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000000000fee13a103a10d593b9ae06b3e05f2e7e1c00000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000060000000000000000000000000cccccccccc33d538dbc2ee4feab0a7a1ff4e8a94000000000000000000000000da8a8833e938192781ade161d4b46c4973a40402000000000000000000000000000000000000000000000031f25585d4ebc644aa0c',
      chain: publicTestClient.chain,
      kzg: undefined,
      stateOverride: getUnlimitedBalanceAndApprovalStateOverrides(
        SENDER,
        TOKEN,
        TO,
      ),
      cache: {
        cachePath: TEST_CACHE_DIR,
        etherscanApiKey: '8E6CI28EZUYCY1GG8CMZTPCCCNCVYCS8S2',
      },
      run: {
        env: { kind: 'rpc' },
        showProgressBar: false,
        streamLogs: false,
      },
    })

    expect(res).toBeUndefined()
    expect(error?.name).toBeDefined()
    expect(error?.name).toBe('UnsupportedTraceMethodError')
  })
})
